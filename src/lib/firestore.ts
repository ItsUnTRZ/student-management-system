// Firestore database service
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore

import {
  collection,
  doc,
  addDoc,
  getDoc,
  getDocs,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
  limit,
  startAfter,
  QueryDocumentSnapshot,
  DocumentData,
  Timestamp,
} from 'firebase/firestore'
import { db } from './firebase'
import { Student, Course, Enrollment, User, StudentFilters, Pagination } from '@/types'

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á Firestore Timestamp ‡πÄ‡∏õ‡πá‡∏ô Date
const convertTimestamp = (timestamp: any): Date => {
  if (timestamp && timestamp.toDate) {
    return timestamp.toDate()
  }
  return new Date(timestamp)
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô Firestore Timestamp
const convertToTimestamp = (date: Date) => {
  return Timestamp.fromDate(date)
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firestore Index Error
const handleIndexError = (error: any, operationName: string): Error => {
  if (error.code === 'failed-precondition') {
    console.warn(`‚ö†Ô∏è  Firestore Index Required for ${operationName}:`, error.message)
    
    // ‡∏î‡∏∂‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏à‡∏≤‡∏Å error message
    const indexUrl = error.message.match(/https:\/\/[^\s]+/)
    
    if (indexUrl) {
      console.log('üîó Create index at:', indexUrl[0])
      return new Error(`
‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Firestore Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${operationName}

üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ: ${indexUrl[0]}
2. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: firebase deploy --only firestore:indexes

üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ client-side filtering ‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
      `)
    }
    
    return new Error(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Firestore Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${operationName}`)
  }
  
  return error
}

// ==================== STUDENT OPERATIONS ====================

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà
export const createStudent = async (studentData: Omit<Student, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date()
    const studentWithTimestamps = {
      ...studentData,
      createdAt: convertToTimestamp(now),
      updatedAt: convertToTimestamp(now),
    }

    const docRef = await addDoc(collection(db, 'students'), studentWithTimestamps)
    return docRef.id
  } catch (error: any) {
    throw new Error(`Failed to create student: ${error.message}`)
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏° ID
export const getStudent = async (id: string): Promise<Student | null> => {
  try {
    const docRef = doc(db, 'students', id)
    const docSnap = await getDoc(docRef)

    if (!docSnap.exists()) {
      return null
    }

    const data = docSnap.data()
    return {
      id: docSnap.id,
      ...data,
      dob: convertTimestamp(data.dob),
      createdAt: convertTimestamp(data.createdAt),
      updatedAt: convertTimestamp(data.updatedAt),
    } as Student
  } catch (error: any) {
    throw new Error(`Failed to get student: ${error.message}`)
  }
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
export const getStudents = async (
  filters: StudentFilters,
  pagination: { page: number; limit: number }
): Promise<{ students: Student[]; pagination: Pagination }> => {
  try {
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ client-side filtering ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á composite index
    // ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: query ‡∏ó‡∏µ‡πà‡∏°‡∏µ where ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß + orderBy ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ composite index ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ client-side filtering ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á index
    
    let q = query(collection(db, 'students'), orderBy('name'))

    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢ query ‡∏á‡πà‡∏≤‡∏¢‡πÜ
      const querySnapshot = await getDocs(q)
      let students: Student[] = []

      querySnapshot.forEach((doc) => {
        const data = doc.data()
        students.push({
          id: doc.id,
          ...data,
          dob: convertTimestamp(data.dob),
          createdAt: convertTimestamp(data.createdAt),
          updatedAt: convertTimestamp(data.updatedAt),
        } as Student)
      })

      // Client-side filtering ‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
      const filteredStudents = students.filter((student) => {
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° search
        if (filters.search) {
          const searchTerm = filters.search.toLowerCase()
          const matchesSearch = (
            student.name.toLowerCase().includes(searchTerm) ||
            student.studentId.toLowerCase().includes(searchTerm) ||
            student.major.toLowerCase().includes(searchTerm)
          )
          if (!matchesSearch) return false
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° major
        if (filters.major && student.major !== filters.major) {
          return false
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° year
        if (filters.year && student.year !== filters.year) {
          return false
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° status
        if (filters.status && student.status !== filters.status) {
          return false
        }

        return true
      })

      // Pagination
      const total = filteredStudents.length
      const totalPages = Math.ceil(total / pagination.limit)
      const offset = (pagination.page - 1) * pagination.limit
      const paginatedStudents = filteredStudents.slice(offset, offset + pagination.limit)

      return {
        students: paginatedStudents,
        pagination: {
          page: pagination.page,
          limit: pagination.limit,
          total,
          totalPages,
        },
      }

    } catch (queryError: any) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ failed-precondition (missing index)
      if (queryError.code === 'failed-precondition') {
        const indexError = handleIndexError(queryError, '‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤')
        throw indexError
      }
      
      throw queryError
    }

  } catch (error: any) {
    throw new Error(`Failed to get students: ${error.message}`)
  }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
export const updateStudent = async (id: string, updates: Partial<Student>): Promise<void> => {
  try {
    const docRef = doc(db, 'students', id)
    const updateData = {
      ...updates,
      updatedAt: convertToTimestamp(new Date()),
    }
    await updateDoc(docRef, updateData)
  } catch (error: any) {
    throw new Error(`Failed to update student: ${error.message}`)
  }
}

// ‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (soft delete)
export const deleteStudent = async (id: string): Promise<void> => {
  try {
    await updateStudent(id, { status: 'deactivated' })
  } catch (error: any) {
    throw new Error(`Failed to delete student: ${error.message}`)
  }
}

// ‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£ (hard delete)
export const permanentlyDeleteStudent = async (id: string): Promise<void> => {
  try {
    const docRef = doc(db, 'students', id)
    await deleteDoc(docRef)
  } catch (error: any) {
    throw new Error(`Failed to permanently delete student: ${error.message}`)
  }
}

// ==================== COURSE OPERATIONS ====================

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡∏°‡πà
export const createCourse = async (courseData: Omit<Course, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date()
    const courseWithTimestamps = {
      ...courseData,
      createdAt: convertToTimestamp(now),
      updatedAt: convertToTimestamp(now),
    }

    const docRef = await addDoc(collection(db, 'courses'), courseWithTimestamps)
    return docRef.id
  } catch (error: any) {
    throw new Error(`Failed to create course: ${error.message}`)
  }
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getCourses = async (): Promise<Course[]> => {
  try {
    const q = query(collection(db, 'courses'), orderBy('courseId'))
    const querySnapshot = await getDocs(q)
    const courses: Course[] = []

    querySnapshot.forEach((doc) => {
      const data = doc.data()
      courses.push({
        id: doc.id,
        ...data,
        createdAt: convertTimestamp(data.createdAt),
        updatedAt: convertTimestamp(data.updatedAt),
      } as Course)
    })

    return courses
  } catch (error: any) {
    throw new Error(`Failed to get courses: ${error.message}`)
  }
}

// ==================== ENROLLMENT OPERATIONS ====================

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
export const createEnrollment = async (enrollmentData: Omit<Enrollment, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> => {
  try {
    const now = new Date()
    const enrollmentWithTimestamps = {
      ...enrollmentData,
      createdAt: convertToTimestamp(now),
      updatedAt: convertToTimestamp(now),
    }

    const docRef = await addDoc(collection(db, 'enrollments'), enrollmentWithTimestamps)
    return docRef.id
  } catch (error: any) {
    throw new Error(`Failed to create enrollment: ${error.message}`)
  }
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
export const getStudentEnrollments = async (studentId: string): Promise<Enrollment[]> => {
  try {
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ query ‡∏ó‡∏µ‡πà‡∏°‡∏µ composite index ‡∏Å‡πà‡∏≠‡∏ô
    try {
      const q = query(
        collection(db, 'enrollments'),
        where('studentId', '==', studentId),
        orderBy('term', 'desc')
      )
      const querySnapshot = await getDocs(q)
      const enrollments: Enrollment[] = []

      querySnapshot.forEach((doc) => {
        const data = doc.data()
        enrollments.push({
          id: doc.id,
          ...data,
          createdAt: convertTimestamp(data.createdAt),
          updatedAt: convertTimestamp(data.updatedAt),
        } as Enrollment)
      })

      return enrollments

    } catch (queryError: any) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö error failed-precondition
      if (queryError.code === 'failed-precondition') {
        console.warn('‚ö†Ô∏è  Enrollment Index Missing, using fallback query')
        
        // Fallback: query ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ + sort ‡πÉ‡∏ô client
        const q = query(
          collection(db, 'enrollments'),
          where('studentId', '==', studentId)
        )
        const querySnapshot = await getDocs(q)
        const enrollments: Enrollment[] = []

        querySnapshot.forEach((doc) => {
          const data = doc.data()
          enrollments.push({
            id: doc.id,
            ...data,
            createdAt: convertTimestamp(data.createdAt),
            updatedAt: convertTimestamp(data.updatedAt),
          } as Enrollment)
        })

        // Client-side sorting
        enrollments.sort((a, b) => b.term.localeCompare(a.term))
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏£‡πâ‡∏≤‡∏á index (‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ fallback)
        const indexError = handleIndexError(queryError, '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô')
        console.warn(indexError.message)

        return enrollments
      }
      
      throw queryError
    }

  } catch (error: any) {
    throw new Error(`Failed to get student enrollments: ${error.message}`)
  }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Å‡∏£‡∏î
export const updateGrade = async (enrollmentId: string, grade: string, gradePoint: number): Promise<void> => {
  try {
    const docRef = doc(db, 'enrollments', enrollmentId)
    await updateDoc(docRef, {
      grade,
      gradePoint,
      updatedAt: convertToTimestamp(new Date()),
    })
  } catch (error: any) {
    throw new Error(`Failed to update grade: ${error.message}`)
  }
}

// ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
export const deleteEnrollment = async (enrollmentId: string): Promise<void> => {
  try {
    const docRef = doc(db, 'enrollments', enrollmentId)
    await deleteDoc(docRef)
  } catch (error: any) {
    throw new Error(`Failed to delete enrollment: ${error.message}`)
  }
}
